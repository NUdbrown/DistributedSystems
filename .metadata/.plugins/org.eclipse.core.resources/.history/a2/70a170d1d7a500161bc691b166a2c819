import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

import com.hallaLib.HallaStor;

public class Server implements Runnable {

	private Random random = new Random();
	private HashMap<CrudOperations, Object> request;
	
	public static void main(String[] args) {
		Server s = new Server();
		s.run();
	}

	public void run() {

		try {
			ServerSocket ss = new ServerSocket(3000);
			String command = null;
			System.out.println("server created");
			while (!ss.isClosed()) { 
				Socket clientSocket = ss.accept();
				System.out.println("ive accepted");
				
				ObjectInputStream ois = new ObjectInputStream(clientSocket.getInputStream());
				Object currentObj = ois.readObject();
				System.out.println("I accepted the object");
				
				if(currentObj.equals(CrudOperations.ADD)){
					command = "add";
					PrintWriter pw = new PrintWriter(clientSocket.getOutputStream());
					pw.write("add accepted");
				}
				currentObj = ois.readObject();
				System.out.println("I accepted the second object");
				String key = null;
				switch (command.toUpperCase()) {
				case "update":
					getStore().update(key, currentObj);
					break;
				case "add":
					if(currentObj instanceof Driver){					
						System.out.println(((Driver) currentObj).getName());
					}else{
						System.out.println(((Racecar)currentObj).getId());
					}
					key = generateKey(currentObj);
					getStore().add(key, currentObj);
					break;
				case "delete":
					
					getStore().delete(key);
					break;
				case "exit":
					ss.close();
					break;

				}
				
			}
			
			
		}catch(SocketException e){
			System.out.println("socket probably finished and closed - server side");
			e.printStackTrace();
		}
		catch (IOException | ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	public HallaStor getStore() {
		return HallaStor.getInstance();
	}

	public String generateKey(Object object) {

		return null;
	}
}
